service: crud-api-serverless

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: todo-List-SeverlessUser
  environment:
    myDynamoDBTable1: ${self:custom.myDynamoDBTable1}
    myDynamoDBTable2: ${self:custom.myDynamoDBTable2}
    JWT_SECRET: ${self:custom.secret.jwtSecret}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource: '*'

custom:
  myDynamoDBTable1: todoLists
  myDynamoDBTable2: users
  secret: ${file(secret.json)}

functions:
  Auth:
    handler: src/middleware/auth.handler
  createNote:
    handler: src/lambdas/todoLists/createNote.handler
    events:
      - http:
          path: todoLists/create-note
          method: POST
          cors: true
          request:
            schemas:
              application/json: ${file(src/schema/todoLists.json)}
          authorizer:
            name: Auth
  getAllNotes:
    handler: src/lambdas/todoLists/getAllNotes.handler
    events:
      - http:
          path: todoLists/get-notes
          method: GET
          cors: true
          authorizer:
            name: Auth
  deleteNote:
    handler: src/lambdas/todoLists/deleteNote.handler
    events:
      - http:
          path: todoLists/delete-note/{id_Note}
          method: DELETE
          cors: true
          authorizer:
            name: Auth
  updateNote:
    handler: src/lambdas/todoLists/updateNote.handler
    events:
      - http:
          path: todoLists/update-note/{id_Note}
          method: PATCH
          cors: true
          request:
            schemas:
              application/json: ${file(src/schema/todoLists.json)}
          authorizer:
            name: Auth
  login:
    handler: src/lambdas/users/login.handler
    events:
      - http:
          path: users/login
          method: POST
          cors: true
          request:
            schemas:
              application/json: ${file(src/schema/users.json)}
  register: 
    handler: src/lambdas/users/register.handler
    events:
      - http:
          path: users/register
          method: POST
          cors: true
          request:
            schemas:
              application/json: ${file(src/schema/users.json)}

resources:
  Resources:
    myDynamoDBTable1: 
      Type: AWS::DynamoDB::Table
      Properties: 
        TableName: ${self:custom.myDynamoDBTable1}
        AttributeDefinitions:
          - AttributeName: id_Note
            AttributeType: S
        KeySchema:
          - AttributeName: id_Note
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        
    myDynamoDBTable2:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.myDynamoDBTable2}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

        

  